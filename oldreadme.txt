# üåü **A to Z Service Management App** üåü  
### ‚ú® **A Robust and Scalable Service Request Management System** ‚ú®  

---

![Household Service App](https://raw.githubusercontent.com/daiwik-project/House-Hold-Service/refs/heads/main/templates/stack/index.jpg)  

Welcome to the **A to Z Service Management App**‚Äîa dynamic platform designed to efficiently **manage service requests** between **customers**, **professionals**, and **admins**. With **real-time service tracking**, **role-based dashboards**, and **secure authentication**, this app ensures smooth coordination between all users.  

---

## üíº **Executive Summary**  

The **A to Z Service Management App** is a **monolithic**, **secure**, and **feature-rich** platform for handling household service requests. It uses **Flask**, **SQLite3**, and **Bootstrap**, prioritizing **performance**, **data security**, and **user-friendliness**.  

### üèÜ **Key Features:**  
‚úÖ Role-based access (Customers, Professionals, Admins)  
‚úÖ Service request creation & tracking  
‚úÖ Professional service acceptance system  
‚úÖ Admin dashboard for service & user management  
‚úÖ Secure authentication using UUID-based login  

---

## üñ•Ô∏è **Technology Stack**  

### üêç **Backend**  
- **Flask** ‚Äì Python web framework for backend development  
- **SQLite3** ‚Äì Relational database engine for structured data storage  
- **Flask Core Modules**:  
   üîπ `sqlite3` ‚Äì Direct database operations without an ORM  
   üîπ `render_template` ‚Äì Handles Jinja2 templating  
   üîπ `request` ‚Äì Captures user inputs  
   üîπ `redirect` & `url_for` ‚Äì Handles URL routing  
   üîπ `send_file` & `send_from_directory` ‚Äì Manages media and document sharing  

### üé® **Frontend**  
- **Jinja2** ‚Äì Templating engine for dynamic web pages  
- **Bootstrap** ‚Äì Ensures a OLD UI  

---

## üöÄ **Core Functionalities & Features**  

### üéõÔ∏è **Administrative Capabilities:**  
- üèó **Service Category Management**: Create & modify service categories  
- üìä **User Role Management**: Manage customers, professionals, and their access  
- üìã **Real-time Service Monitoring**: View & track all service requests  
- üîç **Advanced Search**: Quickly filter and find users & services  

### üë• **Customer Features:**  
- üìå **Create Service Requests**: Request a household service  
- üìÖ **Track Service Status**: Monitor request progress  
- üîç **Search for Professionals**: Find experts for specific services  
- üë§ **Manage Profile**: Edit personal details and request history  

### üîß **Professional Features:**  
- ‚úÖ **Accept/Reject Service Requests**: Choose available services  
- üìä **Track Job Assignments**: View accepted service requests  
- üîç **Filter Service Requests**: Search by category, location, or availability  

### üîê **Security & Authentication:**  
- üîë **UUID-Based Login System**: Ensures secure user authentication  
- üõ° **Role-Based Access Control**: Prevents unauthorized data access  

---

## üí° **Operational Workflow**  

### üßë‚Äçüíº **Admin Workflow:**  
1. üìÇ **Create Service Categories**  
2. üéõ **Manage Professionals & Customers**  
3. üìù **View & Monitor All Service Requests** 

### üë®‚Äçüéì **Customer Workflow:**  
1. üîê **Login & Browse Services**  
2. üìù **Submit a Service Request**  
3. ‚è≥ **Track Service Progress**  
4. üèÖ **Receive Service Completion Updates**  

### üîß **Professional Workflow:**  
1. üîê **Login & Browse Available Requests**  
2. ‚úÖ **Accept or Reject a Request**  
3. ‚è≥ **Provide the Service**  
4. üèÜ **Update Job Completion Status**  

---

## üóÉÔ∏è **Database Schema**  

Here‚Äôs a **Mermaid.js diagram** of the database schema:  

```mermaid
graph TD;
    User -->|has| ServiceRequest;
    ServiceRequest -->|assigned to| Professional;
    Professional -->|can accept| ServiceRequest;
    ServiceRequest -->|belongs to| ServiceCategory;
    Admin -->|manages| User;
    Admin -->|manages| Professional;
    ServiceRequest -->|status| ServiceStatus;
```

---

üîó **For more information, check the full project report:** [Project Report PDF](https://github.com/daiwik-project/House-Hold-Service/blob/main/Project%20Report.pdf)  

üì∫ **Watch the tutorial video:** [YouTube Video](https://youtu.be/yrqrI5WAHhI)  

---

## üõ†Ô∏è **How to Run the App**  

1. **Clone the repository:**  
   ```sh
   git clone https://github.com/daiwik-project/House-Hold-Service.git
   cd House-Hold-Service
   ```

2. **Install dependencies:**  
   ```sh
   pip install -r requirements.txt
   ```

3. **Run the Flask app:**  
   ```sh
   python app.py
   ```

4. **Access the app in your browser:**  
   ```
   http://127.0.0.1:5000
   ```

---
